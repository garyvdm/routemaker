#!/home/garyvdm/dev/cycleroutemaker/ve/bin/python

import argparse
import logging
import functools
import os
import json
import itertools
import sys
import msgpack
import signal
import yaml
import copy
from pprint import pprint
import math

import requests
import gpolyline
import geographiclib.geodesic
from gpxpy.gpx import GPX, GPXTrack, GPXTrackPoint, GPXTrackSegment, GPXWaypoint
import html2text

h = html2text.HTML2Text()
h.ignore_emphasis = True
html2text = h.handle


geodesic = geographiclib.geodesic.Geodesic.WGS84

class DelayedKeyboardInterrupt(object):
    def __enter__(self):
        self.signal_received = False
        self.old_handler = signal.getsignal(signal.SIGINT)
        signal.signal(signal.SIGINT, self.handler)

    def handler(self, signal, frame):
        self.signal_received = (signal, frame)
        logging.debug('SIGINT received. Delaying KeyboardInterrupt.')

    def __exit__(self, type, value, traceback):
        signal.signal(signal.SIGINT, self.old_handler)
        if self.signal_received:
            self.old_handler(*self.signal_received)

def multi_cache(cache, get_values, keys, *args, **kargs):
    def get_exist_value_key(key):
        try:
            return True, cache[key], key
        except KeyError:
            return False, None, key
    exists, values, keys = zip(*(get_exist_value_key(key) for key in keys))
    index_and_key_to_get = tuple(
        ((i, key)
        for i, (key, exist) in enumerate(zip(keys, exists))
        if not exist)
    )
    logging.info("Getting {} items".format(len(index_and_key_to_get)))
    values = list(values)
    if index_and_key_to_get:
        keys_to_get = [key for i, key in index_and_key_to_get]
        gotten_values = get_values(keys_to_get, *args, **kargs)
        for (i, key), value in zip(index_and_key_to_get, gotten_values):
            values[i] = value
            cache[key] = value
    return values

def get_equal_spaced_points(points, dist_between_points, start_dist):
    cum_dist = start_dist
    yield (points[0][0], points[0][1], cum_dist )
    dist_from_last_step = 0
    last_point = points[0]
    for point in points[1:]:
        gd = geodesic.Inverse(last_point[0], last_point[1], point[0], point[1])
        line = geodesic.Line(gd['lat1'], gd['lon1'], gd['azi1'])
        point_dist_remaining = gd['s12'] + dist_from_last_step
        while point_dist_remaining > dist_between_points:
            point_dist_remaining -= dist_between_points
            cum_dist += dist_between_points
            new_point = line.Position(gd['s12'] - point_dist_remaining)
            yield (round(new_point['lat2'], 7), round(new_point['lon2'], 7), cum_dist)
        dist_from_last_step = point_dist_remaining
        last_point = point
    cum_dist += dist_from_last_step
    yield (points[-1][0], points[-1][1], cum_dist)
    
def get_spaced_points_with_original_points(points, ideal_dist_between_points):
    for point_item0, point_item1 in pairs(points):
        point0 = point_item0[0]
        point1 = point_item1[0]
        gd = geodesic.Inverse(point0[0], point0[1], point1[0], point1[1])
        line = geodesic.Line(gd['lat1'], gd['lon1'], gd['azi1'])
        num_points_for_sec = max((1, round(gd['s12'] / ideal_dist_between_points)))
        dist_between_points = gd['s12'] / num_points_for_sec
        for i in range(num_points_for_sec):
            pos = line.Position(dist_between_points * i)
            yield ((round(pos['lat2'], 6), round(pos['lon2'], 6)), ) + point_item0[1:] + (dist_between_points, )
    yield points[-1] + (0, )
    
def get_elevation_for_points(points):
    n = 200
    for i in range(0, len(points), n):
        section_points = points[i:i+n]
        polyline = gpolyline.encode_coords([(point[0], point[1]) for point in section_points])
        
        r = session.get(
            'https://maps.googleapis.com/maps/api/elevation/json',
            params={
                'sensor': 'false',
                'key': '***REMOVED***',
                'locations':  "enc:{}".format(polyline)
            })
        try:
            elevations = r.json()
        except:
            logging.exception('Error getting elevation json: {}'.format(r.text))
        if elevations['status'] != 'OK':
            logging.error(elevations['status'])
        else:
            yield from (elv['elevation'] for elv in elevations['results'])

def format_dist_to_next(dist):
    if round(dist/100) == 0:
        return ''
    # elif dist < 1000:
    #     return '{:0.0f} m'.format(round(dist, -1))
    else:
        return '{:0.1f}'.format(dist/1000)

def pairs(items):
    return zip(items[:-1], items[1:])

def left_shift(point_items):
    yield point_items[0]
    for point_item_a, point_item, point_item_b in zip(point_items[:-2], point_items[1:-1], point_items[2:]):
        point_a = point_item_a[0]
        point = point_item[0]
        point_b = point_item_b[0]
        gd_a = geodesic.Inverse(point[0], point[1], point_a[0], point_a[1])
        gd_b = geodesic.Inverse(point[0], point[1], point_b[0], point_b[1])
        diff = gd_b['azi1'] - gd_a['azi1']
        if diff < 0:
            diff += 360
        new_point = geodesic.Line(point[0], point[1], diff / 2 + gd_a['azi1']).Position(3 / math.sin(math.radians(diff/2)))
        new_point_t = (round(new_point['lat2'], 7), round(new_point['lon2'], 7))
        yield (new_point_t, ) + point_item[1:]
    yield point_items[-1]

def deg_wrap_to_closest(deg, to_deg):
    up = deg + 360
    down = deg - 360
    return min(deg, up, down, key=lambda x: abs(to_deg - x))


parser = argparse.ArgumentParser()
parser.add_argument('route_file', action='store')
parser.add_argument('--debug', action='store_true', help='Output DEBUG messages.')

args = parser.parse_args()

logging.basicConfig(level=logging.DEBUG if args.debug else logging.INFO)
logging.getLogger('requests').level = logging.DEBUG if args.debug else logging.ERROR



cache_names = ('elevation_cache', 'route_cache')
caches = [(os.path.join(os.path.dirname(__file__), '{}.pack'.format(name)), name)
          for name in cache_names]

for path, name in caches:
    try:
        with open(path, 'rb') as f:
            locals()[name] = msgpack.unpack(f, use_list=False, encoding='utf8')
    except Exception:
        logging.exception("Could not load {}:".format(name))
        locals()[name] = {}
        

try:
    
    name, ext = os.path.splitext(args.route_file)
    if ext == '.json':
        with open(args.route_file, 'r') as f:
            source = json.load(f)
    else:
        with open(args.route_file, 'r') as f:
            source = yaml.safe_load(f)
    
    session = requests.Session()
    
    join_routes = source.get('join_routes', False)
    output = {
        'title': source['title'],
        'join_routes': join_routes,
        'notes': source.get('notes', True)
    }
    output_routes = output.setdefault('routes', [])
    
    route_file_name, _ = os.path.splitext(args.route_file)
    
    dist_cum = 0

    
    for source_route in source['routes']:
        try:
            if not join_routes:
                dist_cum = 0
            
            logging.info('Processing "{}"'.format(source_route['title']))
            output_steps = []
            output_points = []
            output_elevation = []
            
            output_route = {
                'title': source_route['title'],
                'color': source_route['color'],
                'side': bool(source_route.get('side', False)),
                'steps': output_steps,
            }
            output['routes'].append(output_route)
            
            parts = []
            last_part_destination = None
            logging.info('Fetching Route.')
            
            
            for part in source_route['parts']:
                use_prev_origin = part.get('use_prev_origin', True)
                part['origin'] = last_part_destination if last_part_destination and use_prev_origin else part['origin']
                route_request = {
                    'origin': part['origin'],
                    'destination': part['destination'],
                    'waypoints': '|'.join(['via:{}'.format(wp) for wp in part['waypoints']]),
                    'avoid': part.get('avoid', 'highways'),
                }
                if part.get('mode'):
                    route_request['mode'] = part.get('mode')
                route_key = tuple(((key, value) for key, value in sorted(route_request.items())))
                if route_key not in route_cache:
                    route_request.update({
                        'sensor': 'false',
                        'key': '***REMOVED***',
                    })
                    last_part_destination = route_request['destination']
                    part_result = session.get('https://maps.googleapis.com/maps/api/directions/json', params=route_request).json()
                    if part_result['status'] != 'OK':
                        raise Exception("{}: {}". format(part_result['status'], route_request))
                    route_cache[route_key] = part_result['routes'][0]
                part = copy.deepcopy(route_cache[route_key])
                if len(part['legs']) > 1:
                    raise Exception('More than 1 leg.')
                parts.append(part)
        
            output_route['bounds'] = {
                'northeast': {'lat': max([part['bounds']['northeast']['lat'] for part in parts]),
                              'lng': max([part['bounds']['northeast']['lng'] for part in parts]),},
                'southwest': {'lat': min([part['bounds']['southwest']['lat'] for part in parts]),
                              'lng': min([part['bounds']['southwest']['lng'] for part in parts]),},
            }

            steps = []
            for part_i, (source_part, part) in enumerate(zip(source_route['parts'], parts)):
                leg = part['legs'][0]
                is_last_part = part_i == len(parts) - 1 
                part_steps = []
                origin_meta = source_part.get(
                    'origin_meta', 
                    #{'notes': 'Start at <b>Northcliff Country Club</b>'} if part_i == 0 else None
                    None
                )
                if not origin_meta:
                    origin_meta = {
                        'notes': 'Origin filler',
                        'show_step': False,
                        
                    }
                origin_meta.update({
                    'html_instructions': origin_meta['notes'],
                    'distance': {'value': 0},
                    'points': output_points[-1:] + [tuple(point) for point in origin_meta['points']]
                              if 'points' in origin_meta else
                              output_points[-1:] + (
                                [tuple((float(s) for s in source_part['origin'].split(',')))]
                                if not source_part.get('use_prev_origin', True) or not output_points else []
                              ),
                    'allow_mod': False,
                })
                part_steps.append(origin_meta)

                for i, step in enumerate(leg['steps']):
                    step['points'] = gpolyline.decode(step['polyline']['points'])
                    if i + 1 != len(leg['steps']):
                        del step['points'][-1]
                    part_steps.append(step)
                
                destination_meta = source_part.get(
                    'destination_meta',
                    {'notes': 'Finish at <b>Northcliff Country Club</b>', 'icon': 'finish.png'} if is_last_part else None
                )
                
                
                destination_points = (
                    [tuple(point) for point in destination_meta['points']]
                    if destination_meta and 'points' in destination_meta else
                    [tuple((float(s) for s in source_part['destination'].split(',')))]
                )
                
                if len(destination_points) > 1:
                    part_steps.append({
                        'html_instructions': 'Destination filler',
                        'show_step': False,
                        'points': destination_points[:-1],
                        'allow_mod': False,
                    })
                
                if destination_meta:
                    destination_meta.update({
                        'html_instructions': destination_meta['notes'],
                        'distance': {'value': 0},
                        'points': destination_points[-1:],
                        'allow_mod': False,
                    })
                    part_steps.append(destination_meta)
                
                step_mods = {(step_mod['location'][0], step_mod['location'][1], step_mod['maneuver'], ): step_mod
                             for step_mod in source_part.get('step_mods', ())}

                step_i = 0
                while step_i < len(part_steps):
                    step = part_steps[step_i]
                    show_step = step.get('show_step', True)
                    if step['html_instructions'].startswith('Continue'):
                        show_step = False
                    
                    adds = ()
                    
                    if step.get('allow_mod', True):
                        key = (step['points'][0][0], step['points'][0][1], step.get('maneuver', ''), )
                        step_mod = step_mods.get(key)
                        if step_mod:
                            if 'show_step' in step_mod:
                                show_step = step_mod['show_step']
                            
                            if 'html_instructions' in step_mod:
                                step['html_instructions'] = step_mod['html_instructions']
                            if 'new_maneuver' in step_mod:
                                step['maneuver'] = step_mod['new_maneuver']
                            
                            adds = step_mod.get('add', ())
                    
                    step['show_step'] = show_step
                    step['x_dist_to_next'] = 0
                    
                    for add_step in adds:
                        add_step_point = tuple(add_step['location'])
                        
                        # find the closest point
                        _, point_i, point = min((
                            (
                                geodesic.Inverse(add_step_point[0], add_step_point[1], point[0], point[1])['s12'],
                                point_i, point
                            )
                            for point_i, point in enumerate(step['points'])
                        ))
                        if point == add_step_point:
                            pass
                        if point_i == 0:
                            # can only go forward
                            pass
                        elif point_i + 1 == len(step['points']):
                            # can only go back
                            point_i += 1
                        else:
                            close_point_to_add_step_point_azi = geodesic.Inverse(point[0], point[1], add_step_point[0], add_step_point[1])['azi1']
                            
                            _, point_i = min((
                               (
                                    abs(deg_wrap_to_closest(
                                        geodesic.Inverse(point[0], point[1], other_point[0], other_point[1])['azi1'],
                                        close_point_to_add_step_point_azi
                                    ) - close_point_to_add_step_point_azi),
                                    point_i,
                                )
                                for point_i, other_point in ((point_i, step['points'][point_i - 1]), (point_i + 1, step['points'][point_i + 1]))
                            ))
                        add_step['points'] = [add_step_point] + step['points'][point_i:]
                        step['points'] = step['points'][:point_i]
                        
                        add_step['show_step'] = True
                        add_step['x_dist_to_next'] = 0
                        step_i += 1
                        part_steps.insert(step_i, add_step)
                        step = add_step
                    step_i += 1
                    
                
                points = [(point, step) for step in part_steps for point in step['points']]
                points = list(left_shift(points))
                
                output_points.extend([point for point, step in points])

                elevations_get_points = list(get_spaced_points_with_original_points(points, 20))
                elevations_values = multi_cache(elevation_cache, get_elevation_for_points,
                                                (tuple(point[0]) for point in elevations_get_points))
                elevations_points = [(point[0], point[1], point[2], value) for point, value in zip(elevations_get_points, elevations_values)]

                for (point0, step0, dist0, elev0), (point1, step1, dist1, elev1) in pairs(elevations_points):
                    if 'x_cum_dist' not in step0:
                        step0['x_cum_dist'] = dist_cum
                        step0['location'] = point0
                    output_elevation.append(point0 + (round(dist_cum), round(elev0)))

                    elev_diff = elev1 - elev0
                    dist = math.sqrt(dist0 * dist0 + elev_diff * elev_diff)
                    if 'x_dist_to_next' not in step0:
                        pprint(step0)
                    
                    step0['x_dist_to_next'] += dist
                    dist_cum += dist
                step1['x_cum_dist'] = dist_cum
                step1['location'] = point1
                if is_last_part:
                    output_elevation.append(point1 + (round(dist_cum), round(elev1)))
                    
                
                dist_to_next = 0
                for step in part_steps:
                    dist_to_next += step['x_dist_to_next']
                    if 'location' not in step:
                        print(step)
                    if step['show_step']:
                        output_step = {
                            'location': step['location'],
                            'original_location': step['points'][0],
                            'html_instructions': step['html_instructions'],
                        }
                        
                        for key in ('icon', 'marker', 'class'):
                            if key in step and step[key]:
                                output_step[key] = step[key]
                        output_step['maneuver'] = step.get('maneuver', '')
                        
                        output_step['distance'] = '{:0.1f} km'.format(step['x_cum_dist']/1000)
                        output_step['dist_to_next'] = format_dist_to_next(dist_to_next)
                        output_steps.append(output_step)
                        dist_to_next = 0

            output_route['polyline'] = gpolyline.encode_coords(output_points)
            output_route['elevation'] = output_elevation[0::20]

            
            
            gpx = GPX()
            # Create first track in our GPX:
            gpx_track = GPXTrack(name=source['title'] + ' - ' + source_route['title'])
            gpx.tracks.append(gpx_track)
            
            # Create first segment in our GPX track:
            gpx_segment = GPXTrackSegment()
            gpx_track.segments.append(gpx_segment)
            
            for point in points:
                gpx_segment.points.append(GPXTrackPoint(point[0][0], point[0][1]))
                
            for step in output_steps:
                location = step['location']
                gpx.waypoints.append(GPXWaypoint(location[0], location[1], description=html2text(step['html_instructions'])))
            
            name = os.path.join(os.path.dirname(route_file_name), source['title'] + ' - ' + source_route['title'] + '.gpx')
            with open(name, 'w') as f:
                f.write(gpx.to_xml())
            
        except Exception:
            logging.exception('Error processing route {}'.format(source_route['title']))

    
    output['bounds'] = {
        'northeast': {'lat': max([route['bounds']['northeast']['lat'] for route in output_routes]),
                      'lng': max([route['bounds']['northeast']['lng'] for route in output_routes]),},
        'southwest': {'lat': min([route['bounds']['southwest']['lat'] for route in output_routes]),
                      'lng': min([route['bounds']['southwest']['lng'] for route in output_routes]),},
    }
    
    with open(route_file_name + '_web.json', 'w') as f:
        json.dump(output, f, sort_keys=True)
    logging.info('Done.')

    with open(route_file_name + '_web.yaml', 'w') as f:
        yaml.safe_dump(output, f)


finally:
    with DelayedKeyboardInterrupt():
        for path, name in caches:
            with open(path, 'wb') as f:
                msgpack.pack(locals()[name], f)


